from newsapi import NewsApiClient
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict, Any
from smolagents import Tool
import requests


class NewsTool(Tool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ get_everything –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    name = "news_fetcher"
    description = "–ò—â–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –Ω–∞—á–∞–ª–∞ –∏—é–Ω—è 2025 –≥–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π."
    inputs = {
        "query": {
            "type": "string",
            "description": "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∏–Ω—Ñ–ª—è—Ü–∏—è', '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')",
            "required": True
        },
        "sort_by": {
            "type": "string",
            "description": "–ö—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: relevancy (–ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏), popularity (–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏), publishedAt (–ø–æ –¥–∞—Ç–µ)",
            "default": "relevancy",
            "nullable": True
        }
    }
    output_type = "string"

    def __init__(self, api_key: str):
        super().__init__()
        if not api_key:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á –¥–ª—è NewsAPI")
        self.client = NewsApiClient(api_key=api_key)

    def forward(self, query: str, sort_by: Optional[str] = None) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 1 –∏—é–Ω—è 2025 –≥–æ–¥–∞
            results = self.client.get_everything(
                q=query,
                from_param='2025-06-01',
                to=datetime.now().strftime('%Y-%m-%d'),
                language='ru',
                sort_by=sort_by or 'relevancy',
                page_size=5,
                page=1
            )

            articles = results.get('articles', [])
            
            if not articles:
                return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = [
                "üì∞ –¢–æ–ø-5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:",
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'",
                f"üìÖ –ü–µ—Ä–∏–æ–¥: 1 –∏—é–Ω—è - {datetime.now().strftime('%d.%m.%Y')}",
                ""
            ]

            for idx, article in enumerate(articles[:5], 1):
                title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                source = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                date = datetime.strptime(article['publishedAt'], '%Y-%m-%dT%H:%M:%SZ').strftime('%d.%m.%Y')
                url = article.get('url', '')
                description = article.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:150] + '...' if article.get('description') else ''

                response.extend([
                    f"{idx}. {title}",
                    f"   üìå {description}",
                    f"   üìÜ {date} | üì∞ {source}",
                    f"   üîó –ß–∏—Ç–∞—Ç—å: {url}" if url else "",
                    ""
                ])

            return "\n".join(response)

        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"


class CurrencyConversionTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API exchangerate-api.com."""
    name = "currency_converter"
    description = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –≤ —Ü–µ–ª–µ–≤—É—é."
    inputs = {
        "base_currency": {"type": "string", "description": "–ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'USD')."},
        "target_currency": {"type": "string", "description": "–ö–æ–¥ –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'EUR')."},
        "amount": {"type": "number", "description": "–°—É–º–º–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0.", "nullable": True}
    }
    output_type = "object"

    def __init__(self, api_key: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º API.

        Args:
            api_key: –ö–ª—é—á API –¥–ª—è exchangerate-api.com.
        """
        super().__init__()
        if not api_key:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á API –¥–ª—è CurrencyConversionTool")
        self.api_key = api_key

    def forward(self, base_currency: str, target_currency: str, amount: float = 1.0) -> Tuple[float, float]: 
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç—ã.

        Args:
            base_currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, 'USD'.
            target_currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, 'EUR'.
            amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0.

        Returns:
            Tuple[float, float]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π (conversion_rate, conversion_result), –≥–¥–µ
            conversion_rate - –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏, –∞
            conversion_result - —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ.
        """
        endpoint = f"https://v6.exchangerate-api.com/v6/{self.api_key}/pair/{base_currency}/{target_currency}/{amount}"
        response = requests.get(endpoint)
        result = response.json()
        conversion_rate = result["conversion_rate"]
        conversion_result = result["conversion_result"]
        return conversion_rate, conversion_result
    

class TimeTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    name = "time_tool"
    description = "–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ IANA."    
    inputs = {
        "time_zone": {
            "type": "string", 
            "description": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow', 'America/New_York', 'Asia/Tokyo').", 
            "nullable": True
        }
    }
    output_type = "object"

    COMMON_TIMEZONES = [
        "Europe/Moscow", "Europe/London", "Europe/Paris", "Europe/Berlin", 
        "America/New_York", "America/Los_Angeles", "America/Chicago",
        "Asia/Tokyo", "Asia/Shanghai", "Asia/Dubai", "Asia/Kolkata",
        "Australia/Sydney", "Pacific/Auckland"
    ]

    def forward(self, time_zone: str = "Europe/Moscow") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.

        Args:
            time_zone: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow', 'America/New_York').
                       –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–º. –Ω–∞ https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.

        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
        """
        if "/" in time_zone:
            parts = time_zone.split("/", 1)
            area, location = parts[0], parts[1]
        else:
            area, location = time_zone, 
        
        if location:
            base_url = f"https://timeapi.io/api/Time/current/zone?timeZone={area}/{location}"
        else:
            base_url = f"https://timeapi.io/api/Time/current/zone?timeZone={area}"
            
        try:
            response = requests.get(base_url)
            response.raise_for_status()  
            
            result = response.json()
            
            if "dateTime" in result:
                result["summary"] = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ {time_zone}: {result['dateTime']}"
            
            return result
            
        except requests.exceptions.RequestException as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏: {str(e)}. "
            suggestions = ", ".join(self.COMMON_TIMEZONES[:5])
            error_message += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {suggestions}"
            raise ValueError(error_message)
